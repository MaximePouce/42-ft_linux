#!/bin/bash
# This script will check that all dependencies required to start
# building a kernel are installed and in a recent enough version.

# Color coding
RED='\033[0;31m'
CYAN='\033[0;36m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Error codes
SUCCESS=0
COMMAND_FAILURE=1
VERSION_FAILURE=2

packages=(
	"Coreutils sort 8.1"
	"Bash bash 3.2"
	"Binutils ld 2.13.1"
	"Bison bison 2.7"
	"Diffutils diff 2.8.1"
	"Findutils find 4.2.31"
	"Gawk gawk 4.0.1"
	"GCC gcc 5.2"
	"G++ g++ 5.2"
	"Grep grep 2.5.1a"
	"Gzip gzip 1.3.12"
	"M4 m4 1.4.10"
	"Make make 4.0"
	"Patch patch 2.5.4"
	"Perl perl 5.8.8"
	"Python python3 3.4"
	"Sed sed 4.1.5"
	"Tar tar 1.22"
	"Texinfo texi2any 5.0"
	"Xz xz 5.0.0"
)

exit_code=$SUCCESS

check_version()
{
		ver=$($2 --version | grep -E -o '[0-9]+\.[0-9}+(\.[0-9]+)?[a-z]?' | head -1)
		min_ver=$3

		if printf '%s\n' $min_ver $ver | sort -V --check
		then
				echo -e "${CYAN}$1: Installed version ($ver) is greater or equal than $min_ver${NC}"
		else
				echo -e "${RED}$1: Installed version ($ver) does not match minimum required version ($min_ver)${NC}" 1>&2
				exit_code=$VERSION_FAILURE
		fi
}

for package in "${packages[@]}"; do
		IFS=' ' read -r package binary min_version <<< "$package"
		if ! command -v "$binary" &>/dev/null; then
				echo -e "${RED}$package is not installed.${NC}" 1>&2
				exit_code=$COMMAND_FAILURE
		else
				check_version $package $binary $min_version
		fi
done

exit $exit_code
